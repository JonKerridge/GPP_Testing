package GPP_Testing

import groovy_parallel_patterns.DataDetails
import groovy_parallel_patterns.LocalDetails
import groovy_parallel_patterns.PipelineDetails
import groovy_parallel_patterns.ResultDetails
import groovy_parallel_patterns.connectors.reducers.*
import groovy_parallel_patterns.connectors.spreaders.*
import groovy_parallel_patterns.functionals.groups.*
import groovy_parallel_patterns.functionals.pipelines.OnePipelineOne
import groovy_parallel_patterns.terminals.*
import static org.junit.Assert.assertTrue
import TestDataDefs.*

int stages = 3
def m1 = [[0], [0], [0]]             // for stage 1
def m2 = [[100], [100], [100]]       // for stage 2
def m3 = [[1000], [1000], [1000]]    // for stage 3
def er = new TestExtract()

def emitterDetails = new DataDetails(dName: TestData.getName() ,
    dInitMethod: TestData.totalInitialise,
    dInitData: [20],
    dCreateMethod: TestData.create)

def resultDetails = new ResultDetails(rName: TestResult.getName(),
    rInitMethod: TestResult.init,
    rCollectMethod:  TestResult.collector,
    rFinaliseMethod: TestResult.finalise,
    rFinaliseData: [er])

def pipeDetails = new PipelineDetails(stages)

for ( s in 0..< stages){
  pipeDetails.insertPipelineDetails(
      s,
      TestWorker.getName(),
      TestWorker.init,
      null,
      TestWorker.finalise,
      null
  )
}

pipeDetails.stageDetails[0].lInitData = [25, 10]
pipeDetails.stageDetails[1].lInitData = [25, 100]
pipeDetails.stageDetails[2].lInitData = [25, 200]

def emitter = new Emit(
    eDetails: emitterDetails )

def pipe = new OnePipelineOne(
    stages: 3,
    stageOp: [TestData.func1, TestData.func2, TestData.func3],
    stageModifier: [[0], [0], [0]],
    pDetails: pipeDetails)


def collector = new Collect(
    rDetails: resultDetails)

println "26: $er"

assertTrue (er.finalSum == 210)
assertTrue (er.dataSetCount == 20)
assertTrue (er.finalInstance == 20)
assertTrue (er.maxClone == 0)
assertTrue (er.w1 == 410)
assertTrue (er.w2 == 2210)
assertTrue (er.w3 == 4210)
