package GPP_Testing

import groovy_parallel_patterns.DataDetails
import groovy_parallel_patterns.ResultDetails
import groovy_parallel_patterns.connectors.reducers.AnyFanOne
import groovy_parallel_patterns.connectors.spreaders.AnyFanAny
import groovy_parallel_patterns.connectors.spreaders.OneFanAny
import groovy_parallel_patterns.functionals.groups.AnyGroupAny
import groovy_parallel_patterns.terminals.Collect
import groovy_parallel_patterns.terminals.Emit
import TestDataDefs.TestData
import TestDataDefs.TestExtract
import TestDataDefs.TestResult
import static org.junit.Assert.assertTrue

def destinations = 3
def sources = 3

def er = new TestExtract()

def emitterDetails = new DataDetails(dName: TestData.getName() ,
    dInitMethod: TestData.totalInitialise,
    dInitData: [20],
    dCreateMethod: TestData.create)

def resultDetails = new ResultDetails(rName: TestResult.getName(),
    rInitMethod: TestResult.init,
    rCollectMethod:  TestResult.collector,
    rFinaliseMethod: TestResult.finalise,
    rFinaliseData: [er])

def emitter = new Emit(
    eDetails: emitterDetails )

def outFan = new OneFanAny (
    destinations: destinations)

def aga1 = new AnyGroupAny (
    workers: destinations,
    function: TestData.nullFunc
)

def afa = new AnyFanAny (
    destinations: destinations,
    sources: sources
)

def aga2 = new AnyGroupAny (
    workers: destinations,
    function: TestData.nullFunc
)

def inFan = new AnyFanOne(
    sources: sources)

def collector = new Collect(
    rDetails: resultDetails)

println "7: $er"

assertTrue (er.finalSum == 210)
assertTrue (er.dataSetCount == 20)
assertTrue (er.finalInstance == 20)
