package GPP_Testing

import groovyParallelPatterns.DataDetails
import groovyParallelPatterns.ResultDetails
import groovyParallelPatterns.connectors.reducers.ListMergeOne
import groovyParallelPatterns.connectors.reducers.ListParOne
import groovyParallelPatterns.connectors.reducers.ListSeqOne
import groovyParallelPatterns.connectors.reducers.N_WayMerge
import groovyParallelPatterns.connectors.spreaders.OneParCastList
import groovyParallelPatterns.functionals.groups.ListGroupList
import groovyParallelPatterns.terminals.Collect
import groovyParallelPatterns.terminals.Emit
import TestDataDefs.TestData
import TestDataDefs.TestExtract
import TestDataDefs.TestResult
import static org.junit.Assert.assertTrue

def er = new TestExtract()

def emitterDetails = new DataDetails(dName: TestData.getName() ,
    dInitMethod: TestData.totalInitialise,
    dInitData: [20],
    dCreateMethod: TestData.create)

def resultDetails = new ResultDetails(rName: TestResult.getName(),
    rInitMethod: TestResult.init,
    rCollectMethod:  TestResult.collector,
    rFinaliseMethod: TestResult.finalise,
    rFinaliseData: [er])

//@log 1 "./Test18-"

def emitter = new Emit(
    eDetails: emitterDetails,
    logPhaseName: "emit",
    logPropertyName: "instanceNumber"  )

def outFan = new OneParCastList()

def lgl = new ListGroupList(workers: 4,
    function: TestData.nullFunc,
    logPhaseName: "group",
    logPropertyName: "instanceNumber"
)

def inFan = new N_WayMerge(
    inClassName: TestData.getName(),
    mergeChoice: TestData.mergeMethod

)

def collector = new Collect(
    rDetails: resultDetails,
    logPhaseName: "collect",
    logPropertyName: "instanceNumber")

println "18: $er"

assertTrue (er.finalSum == 840)
assertTrue (er.dataSetCount == 80)
assertTrue (er.finalInstance == 20)
assertTrue (er.maxClone == 80)
