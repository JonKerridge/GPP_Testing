package GPP_Testing

import groovyParallelPatterns.DataDetails
import groovyParallelPatterns.GroupDetails
import groovyParallelPatterns.LocalDetails
import groovyParallelPatterns.ResultDetails
import groovyParallelPatterns.connectors.reducers.*
import groovyParallelPatterns.connectors.spreaders.*
import groovyParallelPatterns.functionals.groups.*
import groovyParallelPatterns.terminals.*
import static org.junit.Assert.assertTrue
import TestDataDefs.*

int workers = 3
def m1 = [[0], [0], [0]]             // for stage 1
def m2 = [[100], [100], [100]]       // for stage 2
def m3 = [[1000], [1000], [1000]]    // for stage 3
def er = new TestExtract()

def emitterDetails = new DataDetails(dName: TestData.getName() ,
    dInitMethod: TestData.totalInitialise,
    dInitData: [21],  // must be divisible by workers
    dCreateMethod: TestData.create)

def resultDetails = new ResultDetails(rName: TestResult.getName(),
    rInitMethod: TestResult.init,
    rCollectMethod:  TestResult.collector,
    rFinaliseMethod: TestResult.finalise,
    rFinaliseData: [er])

def group1Details = new GroupDetails(workers)
def group2Details = new GroupDetails(workers)
def group3Details = new GroupDetails(workers)

for ( w in 0..< workers){
  group1Details.insertGroupDetails(
      w,
      TestWorker.getName(),
      TestWorker.init,
      [100, 0],
      TestWorker.finalise,
      [])
  group2Details.insertGroupDetails(
      w,
      TestWorker.getName(),
      TestWorker.init,
      [100, 0],
      TestWorker.finalise,
      [])
  group3Details.insertGroupDetails(
      w,
      TestWorker.getName(),
      TestWorker.init,
      [100, 0],
      TestWorker.finalise,
      [])
}


def emitter = new Emit(
    eDetails: emitterDetails )

def outFan = new OneFanList ()

def stage1 = new ListGroupList(
    gDetails: group1Details,
    function: TestData.func1,
    modifier: m1,
    workers: workers)

def stage2 = new ListGroupList(
    gDetails: group2Details,
    function: TestData.func2,
    modifier: m2,
    workers: workers,
    synchronised: true)

def stage3 = new ListGroupAny(
    gDetails: group3Details,
    function: TestData.func3,
    modifier: m3,
    workers: workers)

def inFan = new AnyFanOne(
    sources: workers)


def collector = new Collect(
    rDetails: resultDetails)

println "21: $er"

assertTrue (er.finalSum == 231)
assertTrue (er.dataSetCount == 21)
assertTrue (er.finalInstance == 21)
assertTrue (er.maxClone == 0)
assertTrue (er.w1 == 231)
assertTrue (er.w2 == 2331)
assertTrue (er.w3 == 21231)
